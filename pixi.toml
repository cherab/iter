[workspace]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64"]
preview = ["pixi-build"]

# -------------------------------
# === Packaging Configuration ===
# -------------------------------
[package]
version = "dynamic" # Until pixi recommends something else

[package.build]
backend = { name = "pixi-build-python", version = "*" }

[package.build.config]
noarch = false

[workspace.build-variants]
python = ["3.10.*", "3.11.*", "3.12.*", "3.13.*"]

[package.host-dependencies]
uv = "*"
python = "*"
hatchling = "*"
hatch-vcs = "*"
hatch-cython = ">=0.6.0rc0"
cython = ">=3.1,<4"
cherab = "1.5.*"

[package.run-dependencies]
cherab-imas = { git = "https://github.com/cherab/imas.git", branch = "develop" }
platformdirs = "*"
rich = "*"
plotly = "*"

# ---------------------------------
# === Development Configuration ===
# ---------------------------------
[dependencies]
cherab-iter = { path = "." }
ipython = "*"

# For notebook demos
jupyterlab = "*"
ipywidgets = "*"
xarray = "*"
netcdf4 = ">=1.7.2,<2"
pyvista = "*"
trame = "*"
trame-vtk = "*"
trame-vuetify = "*"
trame-pvui = "*"
hvplot = ">=0.11.2,<0.12"
jupyter_bokeh = ">=4.0.5,<5"
panel = ">=1.6.2,<2"
python-kaleido = "*"

# For bolometer data loading in DD v4.1+
[pypi-dependencies]
imas-data-dictionary = { git = "https://github.com/iterorganization/IMAS-Data-Dictionary.git", rev = "5180c827041e13ee9e78ad1c714f2f6f1ea874f0" }

[activation.env]
# UDA environment variables
UDA_PORT = "56565"
UDA_HOST = "uda.iter.org"
UDA_CLIENT_SSL_KEY = "$PIXI_PROJECT_ROOT/.uda/private.key"
UDA_CLIENT_CA_SSL_CERT = "$PIXI_PROJECT_ROOT/.uda/ca-server-certificate.pem"
UDA_CLIENT_SSL_CERT = "$PIXI_PROJECT_ROOT/.uda/certificate.pem"
UDA_CLIENT_SSL_AUTHENTICATE = "1"

[tasks]
ipython = { cmd = "ipython", description = "🐍 Start an IPython shell" }
lab = { cmd = [
  "jupyter",
  "lab",
  "--notebook-dir",
  "demos",
], description = "🚀 Run JupyterLab" }

# === Tests feature ===
[feature.test.dependencies]
pytest = "*"
pytest-cov = "*"

[feature.test.tasks]
test = { cmd = ["pytest", "tests"], description = "🧪 Run the tests" }

# === Docs feature ===
[feature.docs.dependencies]
ipykernel = "*"
ipywidgets = "*"
nbconvert = "*"
nbsphinx = "*"
numpydoc = "*"
pillow = "*"
pygments = ">2.11.0"
sphinx = ">=8.2.2,<9"
sphinx-copybutton = "*"
pydata-sphinx-theme = "*"
sphinx-design = "*"
pandoc = "*"
sphinx-codeautolink = "*"
python-kaleido = "*"

[feature.docs.pypi-dependencies]
sphinx-github-style = "*"

[feature.docs.tasks]
doc-build = { cmd = [
  "sphinx-build",
  "-b",
  "{{ target }}",
  "-j",
  "auto",
  "source",
  "build/{{ target }}",
], cwd = "docs", args = [
  { arg = "target", default = "html" },
], description = "📝 Build the docs" }
doc-clean = { cmd = [
  "rm",
  "-rf",
  "build",
  "source/_api",
], cwd = "docs", description = "🔥 Clean the docs build & api directory" }
doc-serve = { cmd = [
  "python",
  "-m",
  "http.server",
  "8000",
  "--directory",
  "build/html",
], cwd = "docs", description = "🚀 Start a local server for the docs" }

# === Linting feature ===
[feature.lint.dependencies]
dprint = "*"
lefthook = "*"
ruff = "*"
typos = "*"
mypy = "*"
basedpyright = "*"
numpydoc = "*"
actionlint = "*"
shellcheck = "*"
validate-pyproject = "*"
cython-lint = "*"
docformatter = "*"
blacken-docs = "*"
taplo = "*"

[feature.lint.tasks]
lefthook = { cmd = "lefthook", description = "🔗 Run lefthook" }
hooks = { cmd = "lefthook install", description = "🔗 Install pre-commit hooks" }
pre-commit = { cmd = "lefthook run pre-commit", description = "🔗 Run pre-commit checks" }
mypy = { cmd = "mypy", description = "Type check with mypy" }
pyright = { cmd = "basedpyright", description = "Type check with basedpyright" }
ruff-check = { cmd = "ruff check --fix", description = "Lint with ruff" }
ruff-format = { cmd = "ruff format", description = "Format with ruff" }
dprint = { cmd = "dprint fmt", description = "Format with dprint" }
typos = { cmd = "typos --write-changes --force-exclude", description = "Fix typos" }
taplo = { cmd = "taplo fmt", description = "Format toml files with taplo" }
actionlint = { cmd = "actionlint", description = "Lint actions with actionlint" }
blacken-docs = { cmd = "blacken-docs", description = "Format Python markdown blocks with Black" }
validate-pyproject = { cmd = "validate-pyproject pyproject.toml", description = "Validate pyproject.toml" }
numpydoc = { cmd = "numpydoc lint", description = "Validate docstrings with numpydoc" }
docformatter = { cmd = "docformatter --in-place", description = "Format docstrings with docformatter" }
cython-lint = { cmd = "cython-lint", description = "Lint Cython files" }
lint = { cmd = "lefthook run pre-commit --all-files --force", description = "🧹 Run all linters" }

# === Python environment features ===
[feature.py310.dependencies]
python = "3.10.*"
[feature.py313.dependencies]
python = "3.13.*"

[environments]
default = { features = ["py313"], solve-group = "py313" }
docs = { features = ["py313", "docs"], solve-group = "py313" }
test = { features = ["py313", "test"], solve-group = "py313" }
test-py310 = ["py310", "test"]
test-py313 = { features = [
  "py313",
  "test",
], solve-group = "py313" } # alias of test
lint = { features = ["lint"], no-default-feature = true }
