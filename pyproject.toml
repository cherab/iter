[build-system]
requires = ["hatchling", "hatch-vcs", "hatch-cython>=0.6.0rc0", "numpy"]
build-backend = "hatchling.build"

[project]
name = "cherab-iter"
description = "Cherab spectroscopy framework, ITER subpackage"
authors = [
  { name = "munechika-koyo", email = "munechika.koyo@gmail.com" },
  { name = "vsnever" },
  { name = "jacklovell" },
]
readme = "README.md"
requires-python = ">=3.9"
license = { file = "LICENCE.txt" }
keywords = ["cherab", "ITER", "tokamak", "fusion", "plasma"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: European Union Public Licence 1.1 (EUPL 1.1)",
  "Natural Language :: English",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Physics",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["cherab", "platformdirs", "rich"]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/cherab"
# Documentation = "https://cherab.github.io/cherab-iter"
Repository = "https://github.com/cherab/iter"
Issues = "https://github.com/cherab/iter/issues"

# ----------------------
# === Version config ===
# ----------------------
[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata.hooks.vcs]

# ----------------------------
# === Build/Package config ===
# ----------------------------
[tool.hatch.build.targets.wheel]
packages = ["src/cherab"]
artifacts = [
  "*.so",
  "*.dll",
  "*.dylib",
]
exclude = ["*.pyx", "cherab/iter/__init__.pxd"]

[tool.hatch.build.targets.wheel.shared-data]
"share/cherab/demos/iter" = "demos/*"

[tool.hatch.build.targets.wheel.hooks.cython]
dependencies = ["hatch-cython"]

[tool.hatch.build.targets.wheel.hooks.cython.options]
src = "cherab"
include_numpy = true
compile_args = ["-O3"]
compile_py = false
parallel = false

[tool.hatch.build.targets.wheel.hooks.cython.options.files]
targets = ["**/*.pyx"]

# -----------------------
# === Cov/Test config ===
# -----------------------
[tool.coverage.run]
source_pkgs = ["cherab.iter"]
branch = true
parallel = true

[tool.coverage.paths]
test = ["src/test", "*/test/src/test"]
tests = ["tests", "*/test/tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov=cherab_iter --cov-report term-missing --no-cov-on-fail"


# ------------------------------
# === Lint & Format settings ===
# ------------------------------
[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
  "E",   # pycodestyle
  "B",   # flake8-bugbear
  "F",   # pyflakes
  "I",   # isort (import order)
  "N",   # pep8-naming
  "W",   # Warning
  "UP",  # pyupgrade
  "NPY", # numpy specific rules
]
ignore = [
  # Recommended ignores by ruff when using formatter
  "E501", # line too long
  "N803", # argument name should be lowercase
  "N806", # variable in function should be lowercase
]

[tool.ruff.lint.per-file-ignores]
"**/*.ipynb" = ["W292"] # no newline at end of file

[tool.ruff.format]
docstring-code-format = true

[tool.cython-lint]
max-line-length = 100

[tool.docformatter]
recursive = true
wrap-summaries = 100
wrap-descriptions = 100
blank = false

[tool.numpydoc_validation]
checks = [
  "all",  # report on all checks, except the below
  "GL01", # Docstring text (summary) should start in the line immediately
  "EX01", # No examples section found
  "SA01", # See Also section not found
  "ES01", # No extended summary found
  "GL08", # The object does not have a docstring
  "RT01", # No Returns section found
  "PR01", # Parameters {missing_params} not documented
  "SS06", # Summary should fit in a single line
]
# remember to use single quotes for regex in TOML
exclude = [ # don't report on objects that match any of these regex
  '\.__repr__$',
]
override_SS05 = ['^Process ', '^Assess ', '^Access ']

[tool.mypy]
check_untyped_defs = true
disallow_untyped_defs = true

# --------------------------
# === Pixi configuration ===
# --------------------------
[tool.pixi.workspace]
channels = ["https://prefix.dev/conda-forge"]
platforms = ["linux-64", "osx-arm64", "osx-64"]

[tool.pixi.activation.env]
# UDA environment variables
UDA_PORT="56565"
UDA_HOST="uda.iter.org"
UDA_CLIENT_SSL_KEY="$PIXI_PROJECT_ROOT/.uda/private.key"
UDA_CLIENT_CA_SSL_CERT="$PIXI_PROJECT_ROOT/.uda/ca-server-certificate.pem"
UDA_CLIENT_SSL_CERT="$PIXI_PROJECT_ROOT/.uda/certificate.pem"
UDA_CLIENT_SSL_AUTHENTICATE="1"

[tool.pixi.dependencies]
platformdirs = "*"
rich = "*"
cherab = "*"
plotly = "*"
data-dictionary = "4.0.*"
imas = "*"

# For script execution
xarray = "*"
netcdf4 = ">=1.7.2,<2"
pyvista = ">=0.44.2,<0.45"

[tool.pixi.host-dependencies]
python = "3.12.*"
hatchling = "*"
hatch-vcs = "*"
hatch-cython = ">=0.6.0rc0"
c-compiler = "*"
numpy = "*"

[tool.pixi.pypi-dependencies]
cherab-iter = { path = ".", editable = true }
cherab-imas = { git = "https://github.com/munechika-koyo/cherab-imas.git", rev = "1482340d2f6d27c1dc5258b03b329698fb1f7dc5" }

[tool.pixi.pypi-options]
no-build-isolation = ["cherab-imas", "cherab-iter"]

# === Jupter Lab environment ===
[tool.pixi.feature.lab.dependencies]
jupyterlab = "*"
ipython = "*"
ipywidgets = "*"
xarray = "*"
python-kaleido = "*"
pyvista = "*"
trame = "*"
trame-vtk = "*"
trame-vuetify = "*"
trame-pvui = "*"

[tool.pixi.feature.lab.tasks]
run-jupyterlab = { cmd = [
  "jupyter",
  "lab",
  "--notebook-dir",
  "demos",
], description = "🚀 Run JupyterLab" }

# === Docs environment ===
[tool.pixi.feature.docs.dependencies]
ipykernel = "*"
ipywidgets = "*"
nbconvert = "*"
nbsphinx = "*"
numpydoc = "*"
pillow = "*"
pygments = ">2.11.0"
sphinx = ">=8.2.2,<9"
sphinx-copybutton = "*"
pydata-sphinx-theme = "*"
sphinx-design = "*"
pandoc = "*"
sphinx-codeautolink = "*"
python-kaleido = "*"

[tool.pixi.feature.docs.pypi-dependencies]
sphinx-github-style = "*"

[tool.pixi.feature.docs.tasks]
doc-build = { cmd = [
    "sphinx-build",
    "-b",
    "html",
    "-j",
    "auto",
    "docs/source",
    "docs/build/html",
], description = "📝 Build the docs" }
doc-clean = { cmd = [
    "rm",
    "-rf",
    "docs/build",
    "docs/source/_api",
], description = "🔥 Clean the docs build & api directory" }
doc-serve = { cmd = [
    "python",
    "-m",
    "http.server",
    "8000",
    "--directory",
    "docs/build/html",
], description = "🚀 Start a local server for the docs" }

# === Test environment ===
[tool.pixi.feature.test.dependencies]
pytest = "*"
pytest-cov = "*"

[tool.pixi.feature.test.tasks]
test = { cmd = ["pytest", "tests"], description = "🧪 Run the tests" }

# === Lint/Format environment ===
[tool.pixi.feature.lint.dependencies]
ruff = "*"
mypy = "*"
pre-commit = "*"

[tool.pixi.feature.lint.tasks]
lint = { cmd = "ruff check", description = "🧹 Lint the code" }
format = { cmd = "ruff check --fix", description = "🎨 Format the code" }
pre-commit-run = { cmd = [
    "pre-commit",
    "run",
    "--all-files",
], description = "🩺 Run the all pre-commit hooks", depends-on = [
    "pre-commit-install",
] }
pre-commit-install = { cmd = [
    "pre-commit",
    "install",
], description = "🔗 Install pre-commit hooks" }


[tool.pixi.environments]
lab = { features = ["lab"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
test = { features = ["test"], solve-group = "default" }
lint = { features = ["lint"], no-default-feature = true }
